Running the sample
Build the container from within the /code folder by docker build -t docker-template .

Note that the build process makes sure that the Java files get compiled.

Launch the container with docker run -it docker-template

Verify that testing works out of the box. Within the container, run ./test.sh ./data/testing.txt ./data/solution.csv

This should create a solution.csv file within the /data folder. This should be identical that is already present in the submission's /solution folder.

Verify that training works: ./train.sh ./data/training.txt

This should overwrite the ./model/dummy-model.txt file, so subsequent testing will use the new model instead of the one shipped with the submission.




######Remote run########
ffmpeg from data to wdata using bash +
handle separators
#1-MEANS SKIP CONVERTATION
./train.sh /data/train/ 1 1
./test.sh /data/test/ /wdata/solution.csv 1 1


1.augmentation + whole file
2. remove speech
3. validation as submit
4. several seconds shift


audio_metadata


#Let there be 9 samples and 1 sample in class 0 and 1 respectively
class_counts = [9.0, 1.0]
num_samples = len(class_counts)
labels = [0, 0,..., 0, 1] #corresponding labels of samples

class_weights = [num_samples/class_counts[i] for i in range(len(class_counts))]
weights = [class_weights[labels[i]] for i in range(int(num_samples))]
sampler = WeightedRandomSampler(torch.DoubleTensor(weights), int(num_samples))